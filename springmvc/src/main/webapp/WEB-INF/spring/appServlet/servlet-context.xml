<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	
	<!-- 
		<annotation-driven />   : Spécifie qu'on va utiliser les annotations et non le XML
	 -->
	<annotation-driven />
	
	

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- 
		<resources mapping="/resources/**" location="/resources/" />  ==>  On va autoriser l'accès au dossier 
		ressources dans lequel on va trouver les ressources web (style css, javascript) 
		
		Tous les URLs qui contiennent mapping="/resources/**" pourront être rediriger vers le dossier 
		ressources ==> location="/resources/"
		Par exemple si on crée des feuilles de styles CSS, ils seront accessible dans le dossier 
		resources  ===> location="/resources/" 
		Et accessible via l'url qui contient le mot clé /resources/**
	 -->
	<resources mapping="/resources/**" location="/resources/" />



	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- 
		Par defaut on a un resolver de vue qui est utilisé 
		On suppose que le resolver de vue se nomme InternalResourceViewResolver
		qui utilise deux propriétés prefix et suffix 
		Pour le prefix sa valeur est  ===>  value="/WEB-INF/views/" 
		pour le suffix sa valeur est  ===> value=".jsp"
		Cela suppose que toutes les vues vont être stockées dans le dossier views et 
		le vues vont se terminer par .jsp	 -->
		
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	
	<!-- 
		component-scan permet d'informer à Spring MVC qu'au demarrage de l'application, il devra scanner 
		toutes les  classes qui se trouve dans  le package fr.dawan.springmvc". Il va scanner les annotations 
		Spring MVC
	-->
	<context:component-scan base-package="fr.dawan.springmvc" />
	
	
	
</beans:beans>
